// Code generated by "genenum.exe -typesize=uint16 -typename=CommandID -packagename=commandid -basedir=enum -vectortype=int"

package commandid

import "fmt"

type CommandID uint16

const (
	Invalid CommandID = iota // make empty packet error
	Echo                     // simple echo
	//

	CommandID_Count int = iota
)

var _CommandID2string = [CommandID_Count][2]string{
	Invalid: {"Invalid", "make empty packet error"},
	Echo:    {"Echo", "simple echo"},
}

func (e CommandID) String() string {
	if e >= 0 && e < CommandID(CommandID_Count) {
		return _CommandID2string[e][0]
	}
	return fmt.Sprintf("CommandID%d", uint8(e))
}

func (e CommandID) CommentString() string {
	if e >= 0 && e < CommandID(CommandID_Count) {
		return _CommandID2string[e][1]
	}
	return ""
}

var _string2CommandID = map[string]CommandID{
	"Invalid": Invalid,
	"Echo":    Echo,
}

func String2CommandID(s string) (CommandID, bool) {
	v, b := _string2CommandID[s]
	return v, b
}
