// Code generated by "genenum.exe -typesize=uint8 -typename=FlowType -packagename=flowtype -basedir=enum -vectortype=int"

package flowtype

import "fmt"

type FlowType uint8

const (
	Invalid      FlowType = iota // make uninitalized packet error
	Request                      // for request packet (response packet expected)
	Response                     // is reply of request packet
	Notification                 // is just send and forget packet

	FlowType_Count int = iota
)

var _FlowType2string = [FlowType_Count][2]string{
	Invalid:      {"Invalid", "make uninitalized packet error"},
	Request:      {"Request", "for request packet (response packet expected)"},
	Response:     {"Response", "is reply of request packet"},
	Notification: {"Notification", "is just send and forget packet"},
}

func (e FlowType) String() string {
	if e >= 0 && e < FlowType(FlowType_Count) {
		return _FlowType2string[e][0]
	}
	return fmt.Sprintf("FlowType%d", uint8(e))
}

func (e FlowType) CommentString() string {
	if e >= 0 && e < FlowType(FlowType_Count) {
		return _FlowType2string[e][1]
	}
	return ""
}

var _string2FlowType = map[string]FlowType{
	"Invalid":      Invalid,
	"Request":      Request,
	"Response":     Response,
	"Notification": Notification,
}

func String2FlowType(s string) (FlowType, bool) {
	v, b := _string2FlowType[s]
	return v, b
}
